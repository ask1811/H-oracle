# -*- coding: utf-8 -*-
"""DiabetesDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aY304hU0M_HuvlyZ088vrWny4BvYM5tF

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

diabetes_data_raw = pd.read_csv('/content/diabetes_data.csv')

diabetes_data_raw.head()

diabetes_data_raw.tail()

diabetes_data_raw.info()

dm = diabetes_data_raw[["Age","Sex","HighChol","BMI","Smoker","PhysActivity","PhysHlth","Fruits","Veggies","HvyAlcoholConsump","Stroke","HighBP","Diabetes"]]
dm.head()

dm.shape

dm.describe()

dm['Diabetes'].value_counts()

"""Splitting the features and output"""

X = dm.drop(columns='Diabetes', axis=1)
Y = dm['Diabetes']

print(X)

print(Y)

"""Split the data into train and test"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model (Logistic Regression)"""

model = LogisticRegression()

# training model with training data
model.fit(X_train.values, Y_train.values)

"""Saving the Model as a Pickle file"""

import pickle
pickle.dump(model,open('diabetes_model.pkl', 'wb'))

"""Model Evaluation (Accuracy Score)"""

# accuracy on training data
X_train_prediction = model.predict(X_train.values)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train.values)

print('Accuracy on training data is : ', training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test.values)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data is : ', test_data_accuracy)

"""Building a predictive system"""

input_data = (6.0,0.0,0.0,38.0,0.0,1.0,1.0,1.0,0.0,2.0,0.0,0.0)
# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping numpy array since we are prediciting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)

print(prediction)

if(prediction[0]==0):
  print("The person has low chance to have diabetes")
else:
  print("The person has high chance to have diabetes")