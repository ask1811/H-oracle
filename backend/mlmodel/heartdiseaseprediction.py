# -*- coding: utf-8 -*-
"""HeartDiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EKDtZBp4V7dc9gkz3A4X1mYyPnOzce0J

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the csv file to pandas dataframe
heart_data = pd.read_csv('./content/heart.csv')

heart_data.head()

heart_data.tail()

# getting info about data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# stats of data
heart_data.describe()

# checking distribution of output var
heart_data['output'].value_counts()

"""Splitting the features and output"""

X = heart_data.drop(columns='output', axis=1)
Y = heart_data['output']

#print(X)

#print(Y)

"""Splitting the data into train and test"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

#print(X.shape, X_train.shape, X_test.shape)

"""Training the Model (Logistic Regression)"""

model = LogisticRegression()

# training model with training data
model.fit(X_train, Y_train)

"""Model Evaluation (Accuracy Score)"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

#print('Accuracy on training data is : ', training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

#print('Accuracy on test data is : ', test_data_accuracy)

"""Building a predictive system"""

input_data = (61,0,0,130,330,0,0,169,0,0,2,0,2)
# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshaping numpy array since we are prediciting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)

#print(prediction)

if(prediction[0]==0):
  print("The person has low chance to have heart disease")
else:
  print("The person has high chance to have heart disease")